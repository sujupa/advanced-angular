Unary Operator: By adding a + sign before a String, it will be converted into a number if it follows the right format.

1) To enable [(ngModel)] for input field, you need to 
   import {FormsModule} from '@angular/forms';
   in app.module.ts

2) Directives are instructions in DOM.
   * Structural Directives -> *ngIf, *ngFor
   * Attribute Directives -> ngClass, ngStyle

3) Bindings:
   * Property Binding -> []
   * Event Binding -> ()
   * Property Binding + Event Binding -> [(ngModel)]

4) @ViewChild('serverContentInput'), {static: true}) serverContent	--> For Angular 8+

5) <ng-content></ng-content> is used when you want to render the content between the component selector used in some other component!

6) @ContentChild('localReference'), {static: true}) variableName	--> For Angular 8+
   * Used when you use #localReference in <ng-content> and want to use it in actual component of <ng-content>.

7) Lifecycle:
   * ngOnChnages
   * ngOnInit -> It will run after the constructor
   * ngDoCheck
   * ngAfterContentInit
   * ngAfterContentChecked
   * ngAfterViewInit
   * ngAfterViewChecked
   * ngOnDestroy

8) If you want that a dropdown can also be closed by a click anywhere outside (which also means that a click on one dropdown closes any other one, btw.), replace the code of dropdown.directive.ts by this one (placing the listener not on the dropdown, but on the document):

******************************************************************************************************************

import {Directive, ElementRef, HostBinding, HostListener} from '@angular/core';
 
@Directive({
  selector: '[appDropdown]'
})
export class DropdownDirective {
  @HostBinding('class.open') isOpen = false;
  @HostListener('document:click', ['$event']) toggleOpen(event: Event) {
    this.isOpen = this.elRef.nativeElement.contains(event.target) ? !this.isOpen : false;
  }
  constructor(private elRef: ElementRef) {}
}

******************************************************************************************************************

9) To apply css class on router:
   * routerLinkActive="cssClassName"
   * [routerLink]="['/users',10,'Anna']"  --> if there are params in url
   * [routerLinkActiveOptions]="{exact: true}" --> Apply on complete path

10) Relative path to router --> 

    * Example: localhost:4200/trial/test --> It will append to current url path

******************************************************************************************************************    

    import { Router, ActivatedRoute } from '@angular/router';

    constructor( private route: ActivatedRoute ) { }
	
    this.router.navigate(['test'], {relativeTo: this.route});

******************************************************************************************************************

11) If you want to add parameters to your path, you need to use colon(:) and parameter name in app.module.ts

******************************************************************************************************************    

{ path: 'trial/:id', component: TrialComponent }

******************************************************************************************************************    

12) Always use below method to get params from url because it uses observables to fetch params and don't use snapshot of params

this.route.params.subscribe((params:Params) => {
		var = params['id'];			
});

13) If you want to send query parameters and fragment through url, then use

<button [routerLink]="['/trial','10','edit']" [queryParams]="{param1: '1', param2: '2'}" fragment="loading..">Route To Trial Component with ID 10</button>

14) Programmatically sending query parameters and fragment through url, then use

this.router.navigate(['/trial', id, 'edit'], { queryParams: { param1: '1', param2: '2' }, fragment: 'loading' });

15) To keep a copy(presreve) of routing, so that we dont loose them, then use

 this.router.navigate(['test'], {relativeTo: this.route, queryParamsHandling: 'preserve'});

16) To redirect to some page, then use   --> in app.module.ts

!!!! Make sure the entry is at the last..otherwise it will redirect everything below it.

{ path: 'notFound', component: PageNotFoundComponent },
{ path: '**', redirectTo: '/notFound' }
--------------------------------------------------------------------
{ path: '**', redirectTo: '/notFound', pathMatch: 'full' } --> it will check full path

17) Sending static data through routing --> in app.module.ts

{ path: 'notFound', component: PageNotFoundComponent, data: { message: 'Page Not Found from app.module.ts' } },

   * Add this in your .ts file to access it:

this.errorMessage = this.route.snapshot.data['message'];

this.route.data.subscribe((data: Data) => {   // better way
      this.errorMessage = data['message'];
    });

18) use this in imports of NgModule, so that anything after # will be taken care by client and not server(before hash)
RouterModule.forRoot(routes, { useHash: true })

19) Observables do the following things:
    * Handle Data
    * Handle Error
    * Handle Completion

20) Variable you use to unsubscribe(); must be of type Subscription(imported from rxjs).

private customIntervalObservable: Subscription;

  ngOnDestroy() {
    this.customIntervalObservable.unsubscribe();
  }

21) Observables in Trial Component.

22) Instead of EventEmitter use Subject() and instead of emit(value) use next(value);	--> use of Subject in rxjs

    * Use Subjects only for emitting data between components and services and NOT for @Output() events!!!!

23) 

