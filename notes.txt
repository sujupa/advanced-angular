1) To enable [(ngModel)] for input field, you need to 
   import {FormsModule} from '@angular/forms';
   in app.module.ts

2) Directives are instructions in DOM.
   * Structural Directives -> *ngIf, *ngFor
   * Attribute Directives -> ngClass, ngStyle

3) Bindings:
   * Property Binding -> []
   * Event Binding -> ()
   * Property Binding + Event Binding -> [(ngModel)]

4) @ViewChild('serverContentInput'), {static: true}) serverContent	--> For Angular 8+

5) <ng-content></ng-content> is used when you want to render the content between the component selector used in some other component!

6) @ContentChild('localReference'), {static: true}) variableName	--> For Angular 8+
   * Used when you use #localReference in <ng-content> and want to use it in actual component of <ng-content>.

7) Lifecycle:
   * ngOnChnages
   * ngOnInit -> It will run after the constructor
   * ngDoCheck
   * ngAfterContentInit
   * ngAfterContentChecked
   * ngAfterViewInit
   * ngAfterViewChecked
   * ngOnDestroy

8) If you want that a dropdown can also be closed by a click anywhere outside (which also means that a click on one dropdown closes any other one, btw.), replace the code of dropdown.directive.ts by this one (placing the listener not on the dropdown, but on the document):

******************************************************************************************************************

import {Directive, ElementRef, HostBinding, HostListener} from '@angular/core';
 
@Directive({
  selector: '[appDropdown]'
})
export class DropdownDirective {
  @HostBinding('class.open') isOpen = false;
  @HostListener('document:click', ['$event']) toggleOpen(event: Event) {
    this.isOpen = this.elRef.nativeElement.contains(event.target) ? !this.isOpen : false;
  }
  constructor(private elRef: ElementRef) {}
}

******************************************************************************************************************

9) 